devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
library(knitr) ## kable()
library(kableExtra) ## kable_styling(), save_kable()
library(usethis) ## use_directory(), proj_path()
knitr::opts_chunk$set(
collapse=TRUE,
comment="",
fig.align="center",
cache=FALSE
)
## this option avoid use_directory() being verbose later on
options(usethis.quiet=TRUE)
library(SummarizedExperiment)
se <- readRDS(file.path(system.file("extdata", package="IEOproject"), "GSE45669.rds"))
#se <- readRDS("../inst/extdata/GSE45669.rds")
se
head(rowData(se))
dim(colData(se))
head(colData(se), n=3)
library(IEOproject)
library(edgeR)
dge <- DGEList(counts=assays(se)$counts, genes=rowData(se))
dim(dge)
assays(se)$logCPM <- cpm(dge, log=TRUE,  prior.count=0.25)
assays(se)$logCPM[1:5, 1:5]
# loop over the columns and count unique values
for (col in names(colData(se))) {
unique_vals <- unique(colData(se)[[col]])
if (any(length(unique_vals) %in% c(1, 16))) {
next # skip to the next column
} else {
counts <- table(colData(se)[[col]])
cat(paste0("Column '", col, "' has ", length(unique_vals), " unique values:\n"))
print(counts)
}
}
# simpler names
names(colData(se))[37] <- "id"
names(colData(se))[36] <- "lacStage"
names(colData(se))[35] <- "protocol"
# creating factors
colData(se)$idFac <- factor(colData(se)$id)
# colData(se)$lacStageFac <- factor(colData(se)$lacStage)
colData(se)$lacStageFac <- factor(colData(se)$lacStage,
levels = c("Colostrum", "Transitional", "Mature"),
labels = c(1, 2, 3))
#colData(se)$protocolFac <- factor(colData(se)$protocol)
colData(se)$protocolFac <- factor(colData(se)$protocol,
levels = c("Soft spin, Unwashed", "Hard spin, Unwashed", "Hard spin, Washed once", "Hard spin, Washed twice"),
labels = c(1, 2, 3, 4 ))
tmpdf <- data.frame("Patient"=colData(se)$id,
"lacStage"=colData(se)$lacStage,
"protocol"=colData(se)$protocol,
check.names=FALSE)
ktab <- kable(tmpdf, caption="Phenotypic variables.")
kable_styling(ktab, position="center")
par(mar=c(7, 5, 2, 2))
ord <- order(dge$sample$lib.size/1e6)
ordmreads <- dge$sample$lib.size[ord]/1e6
names(ordmreads) <- colnames(se)[ord]
bp <- barplot(ordmreads, las=1, ylab="Millions of reads",
xlab="", col=c("blue", "green", "red")[colData(se)$lacStageFac[ord]], las=2, ylim = c(0, 50))
legend("topleft", c("Colostrum", "Transitional", "Mature"), fill=c("blue", "green", "red"), inset=0.01, cex=0.85)
par(mar=c(7, 5, 2, 2))
ord <- order(dge$sample$lib.size/1e6)
ordmreads <- dge$sample$lib.size[ord]/1e6
names(ordmreads) <- colnames(se)[ord]
bp <- barplot(ordmreads, las=1, ylab="Millions of reads",
xlab="", col=c("blue", "green", "red", "orange")[colData(se)$protocolFac[ord]], las=2, ylim = c(0, 60))
legend("topleft", c("Soft spin, Unwashed", "Hard spin, Unwashed", "Hard spin, Washed once", "Hard spin, Washed twice"),
fill=c("blue", "green", "red", "orange"), inset=0.01, cex=0.85)
library(geneplotter)
par(mar=c(4, 5, 1, 1))
lst <- as.list(as.data.frame(assays(se)$logCPM))
multidensity(lst, xlab="log 2 CPM", legend=NULL,
main="", las=1)
par(mar=c(7, 5, 2, 2))
boxplot(assays(se)$logCPM, col="gray", ylab=expression(log[2] * "CPM"),
cex.axis=1.2, cex.lab=1.5, las=2)
# Create factors for lacStage and protocol
se$lacStageFac <- factor(colData(se)$lacStage,
levels = c("Colostrum", "Transitional", "Mature"),
labels = c(1, 2, 3))
se$protocolFac <- factor(colData(se)$protocol,
levels = c("Soft spin, Unwashed", "Hard spin, Unwashed", "Hard spin, Washed once", "Hard spin, Washed twice"),
labels = c(1, 2, 3, 4 ))
# Create logical mask excluding column containing "SRR801705" in the name
mask <- !grepl("SRR801705", colnames(se))
# Subset the data frame using the mask
se_sample_filtered <- se[, mask]
# The same for the samples in the dge object
# in the counts table
# in the samples table
mask <- rownames(dge$samples) != "SRR801705"
dge_sample_filtered <- dge
dge$samples_masked <- dge$samples[mask, ]
dge_sample_filtered$samples <- dge$samples_masked
mask <- !grepl("SRR801705", colnames(dge$counts))
dge_sample_filtered$counts <- dge_sample_filtered$counts[, mask]
avgexp <- rowMeans(assays(se_sample_filtered)$logCPM)
hist(avgexp, xlab="log2 CPM", main="", las=1, ylim=c(0,8000))
#cpmcutoff <- round(10/min(dge_sample_filtered$sample$lib.size/1e6), digits=1)
cpmcutoff <- 0.1
print(cpmcutoff)
#nsamplescutoff <- min(table(se_sample_filtered$protocolFac))
nsamplescutoff<- 15
print(nsamplescutoff)
mask <- rowSums(cpm(dge_sample_filtered) > cpmcutoff) >= nsamplescutoff
se.filt <- se_sample_filtered[mask, ]
dim(se.filt)
dge.filt <- dge_sample_filtered[mask, ]
dim(dge.filt)
par(mar=c(4, 5, 1, 1))
h <- hist(avgexp, xlab=expression("Expression level (" * log[2] * "CPM)"),
main="", las=1, col="grey", cex.axis=0.95, cex.lab=1.2)
x <- cut(rowMeans(assays(se.filt)$logCPM), breaks=h$breaks)
lines(h$mids, table(x), type="h", lwd=10, lend=1, col="darkred")
legend("topright", c("All genes", "Filtered genes"), fill=c("grey", "darkred"))
dge.filt <- calcNormFactors(dge.filt)
assays(se.filt)$logCPM <- cpm(dge.filt, log=TRUE,
normalized.lib.sizes=TRUE)
par(mfrow=c(5, 4), mar=c(4, 5, 3, 1))
for (i in 1:ncol(se.filt)) {
A <- rowMeans(assays(se.filt)$logCPM)
M <- assays(se.filt)$logCPM[, i] - A
smoothScatter(A, M, main=colnames(se.filt)[i], las=1,cex.main=2.5)
abline(h=0, col="blue", lwd=2)
lo <- lowess(M ~ A)
lines(lo$x, lo$y, col="red", lwd=2)
}
table(se.filt$lacStageFac, se.filt$protocolFac)
par(mar=c(8, 5, 1, 1))
logCPM <- cpm(dge.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(se.filt$protocolFac)
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt)
outcome <- paste(se.filt$lacStageFac, colnames(se), sep="\n")
names(outcome) <- colnames(se.filt)
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples",
cex=2.0, cex.axis=1.9, cex.main=1.9)
legend("right", levels(se.filt$protocolFac),
fill=seq_len(nlevels(se.filt$protocolFac)),
legend=c("Soft spin, Unwashed", "Hard spin, Unwashed", "Hard spin, Washed once", "Hard spin, Washed twice"))
par(mar=c(8, 5, 1, 1))
logCPM <- cpm(dge.filt, log=TRUE, prior.count=3)
d <- as.dist(1-cor(logCPM, method="spearman"))
sampleClustering <- hclust(d)
batch <- as.integer(se.filt$lacStageFac)
sampleDendrogram <- as.dendrogram(sampleClustering, hang=0.1)
names(batch) <- colnames(se.filt)
outcome <- paste(se.filt$protocolFac, colnames(se), sep="\n")
names(outcome) <- colnames(se.filt)
sampleDendrogram <- dendrapply(sampleDendrogram,
function(x, batch, labels) {
if (is.leaf(x)) {
attr(x, "nodePar") <- list(lab.col=as.vector(batch[attr(x, "label")]))
attr(x, "label") <- as.vector(labels[attr(x, "label")])
}
x
}, batch, outcome)
plot(sampleDendrogram, main="Hierarchical clustering of samples")
legend("topright", levels(se.filt$lacStageFac),
fill=seq_len(nlevels(se.filt$lacStageFac)),
legend = c("Colostrum", "Transitional", "Mature"))
outcome <- se.filt$lacStage
batch <- as.integer(se.filt$protocolFac)
names(outcome) <- colnames(se.filt)
plotMDS(dge.filt, labels=outcome, col=batch)
legend("bottomright", levels(se.filt$protocolFac),
fill=seq_len(nlevels(se.filt$protocolFac)), inset=0.05,
legend=c("Soft spin, Unwashed", "Hard spin, Unwashed", "Hard spin, Washed once", "Hard spin, Washed twice"))
library(sva)
se.filt.all <- se.filt[,se.filt$lacStageFac!=3]
se.filt.all$stage <- droplevels(se.filt.all$lacStageFac)
mod <- model.matrix(~ se.filt.all$stage,
colData(se.filt.all))
mod0 <- model.matrix(~ 1, colData(se.filt.all))
pv <- f.pvalue(assays(se.filt.all)$logCPM, mod, mod0)
#sum(p.adjust(pv, method="fdr") < 0.05)
#sum(p.adjust(pv, method="fdr") < 0.1)
hist(pv, main="", las=1)
mask <- p.adjust(pv, method="fdr") < 0.1
DEgenesEGs <- names(pv)[mask]
DEgenesSyms <- mcols(se.filt)[DEgenesEGs, "symbol"]
DEgenesPvalue <- pv[mask]
DEgenesDesc <- mcols(se.filt)[DEgenesEGs, "description"]
DEgenesDesc <- sub(" \\[.+\\]", "", DEgenesDesc)
DEgenesTab <- data.frame(EntrezID=DEgenesEGs,
Symbol=DEgenesSyms,
Description=DEgenesDesc,
"P value"=DEgenesPvalue,
stringsAsFactors=FALSE, check.names=FALSE)
DEgenesTab <- DEgenesTab[order(DEgenesTab[["P value"]]), ] ## order by p-value
rownames(DEgenesTab) <- 1:nrow(DEgenesTab)
## generate full table in a CSV file and store it in the 'doc' directory
## twice, once in 'doc' to enable quickly look up during vignette editing
## and building with 'devtools::build_vignettes()' and a second time in
## 'inst/doc' to make these files available at install.
use_directory(file.path("doc"))
use_directory(file.path("inst", "doc"))
fnameCSV <- "DEgenes_no3.csv"
fpathCSV <- proj_path(file.path("doc", fnameCSV))
write.csv(DEgenesTab, fpathCSV, row.names=FALSE)
fpathCSV <- proj_path(file.path("inst", "doc", fnameCSV))
write.csv(DEgenesTab, fpathCSV, row.names=FALSE)
## generate full table in HTML and store it into the 'doc' directory
## twice, just as we did with the CSV file. note that because the
## table caption is not translated from Markdown, but directly copied
## into HTML, we need to avoid using the '<' symbol, as in FDR < 10%,
## and put its HTML code instead (&lt;)
ktab <- kable(DEgenesTab, "html", escape=FALSE, row.names=TRUE,
caption=sprintf("Differentially expressed genes. Differentially expressed genes between between the 3 lactaction stages FDR &lt; 10%% (CSV <a href=\"%s\" download>file</a>).",
fnameCSV))
ktab <- kable_styling(ktab,
bootstrap_options=c("stripped", "hover", "responsive"),
fixed_thead=TRUE)
fnameHTML <- "DEgenes_no3.html"
fpathHTML <- proj_path(file.path("doc", fnameHTML))
save_kable(ktab, file=fpathHTML, self_contained=TRUE)
fpathHTML <- proj_path(file.path("inst", "doc", fnameHTML))
save_kable(ktab, file=fpathHTML, self_contained=TRUE)
ktab <- kable(DEgenesTab[1:10, ], "html", escape=FALSE, row.names=TRUE,
caption=sprintf("Differentially expressed genes. Top-10 differentially expressed genes with lowest p-value between the 3 lactation stages",
fnameHTML, fnameCSV))
kable_styling(ktab, position="center")
se.filt.all <- se.filt[,se.filt$lacStageFac!=1]
se.filt.all$stage <- droplevels(se.filt.all$lacStageFac)
mod <- model.matrix(~ se.filt.all$stage,
colData(se.filt.all))
mod0 <- model.matrix(~ 1, colData(se.filt.all))
pv <- f.pvalue(assays(se.filt.all)$logCPM, mod, mod0)
#sum(p.adjust(pv, method="fdr") < 0.05)
#sum(p.adjust(pv, method="fdr") < 0.1)
hist(pv, main="", las=1)
mask <- p.adjust(pv, method="fdr") < 0.1
DEgenesEGs <- names(pv)[mask]
DEgenesSyms <- mcols(se.filt)[DEgenesEGs, "symbol"]
DEgenesPvalue <- pv[mask]
DEgenesDesc <- mcols(se.filt)[DEgenesEGs, "description"]
DEgenesDesc <- sub(" \\[.+\\]", "", DEgenesDesc)
DEgenesTab <- data.frame(EntrezID=DEgenesEGs,
Symbol=DEgenesSyms,
Description=DEgenesDesc,
"P value"=DEgenesPvalue,
stringsAsFactors=FALSE, check.names=FALSE)
DEgenesTab <- DEgenesTab[order(DEgenesTab[["P value"]]), ] ## order by p-value
rownames(DEgenesTab) <- 1:nrow(DEgenesTab)
## generate full table in a CSV file and store it in the 'doc' directory
## twice, once in 'doc' to enable quickly look up during vignette editing
## and building with 'devtools::build_vignettes()' and a second time in
## 'inst/doc' to make these files available at install.
use_directory(file.path("doc"))
use_directory(file.path("inst", "doc"))
fnameCSV <- "DEgenes_no1.csv"
fpathCSV <- proj_path(file.path("doc", fnameCSV))
write.csv(DEgenesTab, fpathCSV, row.names=FALSE)
fpathCSV <- proj_path(file.path("inst", "doc", fnameCSV))
write.csv(DEgenesTab, fpathCSV, row.names=FALSE)
## generate full table in HTML and store it into the 'doc' directory
## twice, just as we did with the CSV file. note that because the
## table caption is not translated from Markdown, but directly copied
## into HTML, we need to avoid using the '<' symbol, as in FDR < 10%,
## and put its HTML code instead (&lt;)
ktab <- kable(DEgenesTab, "html", escape=FALSE, row.names=TRUE,
caption=sprintf("Differentially expressed genes. Differentially expressed genes between between the 3 lactaction stages FDR &lt; 10%% (CSV <a href=\"%s\" download>file</a>).",
fnameCSV))
ktab <- kable_styling(ktab,
bootstrap_options=c("stripped", "hover", "responsive"),
fixed_thead=TRUE)
fnameHTML <- "DEgenes_no1.html"
fpathHTML <- proj_path(file.path("doc", fnameHTML))
save_kable(ktab, file=fpathHTML, self_contained=TRUE)
fpathHTML <- proj_path(file.path("inst", "doc", fnameHTML))
save_kable(ktab, file=fpathHTML, self_contained=TRUE)
ktab <- kable(DEgenesTab[1:10, ], "html", escape=FALSE, row.names=TRUE,
caption=sprintf("Differentially expressed genes. Top-10 differentially expressed genes with lowest p-value between the 3 lactation stages",
fnameHTML, fnameCSV))
kable_styling(ktab, position="center")
se.filt.all <- se.filt[,se.filt$lacStageFac!=2]
se.filt.all$stage <- droplevels(se.filt.all$lacStageFac)
mod <- model.matrix(~ se.filt.all$stage,
colData(se.filt.all))
mod0 <- model.matrix(~ 1, colData(se.filt.all))
pv <- f.pvalue(assays(se.filt.all)$logCPM, mod, mod0)
#sum(p.adjust(pv, method="fdr") < 0.05)
#sum(p.adjust(pv, method="fdr") < 0.1)
hist(pv, main="", las=1)
mask <- p.adjust(pv, method="fdr") < 0.1
DEgenesEGs <- names(pv)[mask]
DEgenesSyms <- mcols(se.filt)[DEgenesEGs, "symbol"]
DEgenesPvalue <- pv[mask]
DEgenesDesc <- mcols(se.filt)[DEgenesEGs, "description"]
DEgenesDesc <- sub(" \\[.+\\]", "", DEgenesDesc)
DEgenesTab <- data.frame(EntrezID=DEgenesEGs,
Symbol=DEgenesSyms,
Description=DEgenesDesc,
"P value"=DEgenesPvalue,
stringsAsFactors=FALSE, check.names=FALSE)
DEgenesTab <- DEgenesTab[order(DEgenesTab[["P value"]]), ] ## order by p-value
rownames(DEgenesTab) <- 1:nrow(DEgenesTab)
## generate full table in a CSV file and store it in the 'doc' directory
## twice, once in 'doc' to enable quickly look up during vignette editing
## and building with 'devtools::build_vignettes()' and a second time in
## 'inst/doc' to make these files available at install.
use_directory(file.path("doc"))
use_directory(file.path("inst", "doc"))
fnameCSV <- "DEgenes_no2.csv"
fpathCSV <- proj_path(file.path("doc", fnameCSV))
write.csv(DEgenesTab, fpathCSV, row.names=FALSE)
fpathCSV <- proj_path(file.path("inst", "doc", fnameCSV))
write.csv(DEgenesTab, fpathCSV, row.names=FALSE)
## generate full table in HTML and store it into the 'doc' directory
## twice, just as we did with the CSV file. note that because the
## table caption is not translated from Markdown, but directly copied
## into HTML, we need to avoid using the '<' symbol, as in FDR < 10%,
## and put its HTML code instead (&lt;)
ktab <- kable(DEgenesTab, "html", escape=FALSE, row.names=TRUE,
caption=sprintf("Differentially expressed genes. Differentially expressed genes between between the 3 lactaction stages FDR &lt; 10%% (CSV <a href=\"%s\" download>file</a>).",
fnameCSV))
ktab <- kable_styling(ktab,
bootstrap_options=c("stripped", "hover", "responsive"),
fixed_thead=TRUE)
fnameHTML <- "DEgenes_no2.html"
fpathHTML <- proj_path(file.path("doc", fnameHTML))
save_kable(ktab, file=fpathHTML, self_contained=TRUE)
fpathHTML <- proj_path(file.path("inst", "doc", fnameHTML))
save_kable(ktab, file=fpathHTML, self_contained=TRUE)
ktab <- kable(DEgenesTab[1:10, ], "html", escape=FALSE, row.names=TRUE,
caption=sprintf("Differentially expressed genes. Top-10 differentially expressed genes with lowest p-value between the 3 lactation stages",
fnameHTML, fnameCSV))
kable_styling(ktab, position="center")
sessionInfo()
library(org.Hs.eg.db)
class(org.Hs.eg.db)
org.Hs.eg.db
length(DEgenesEGs)
DEgenesEGs
tt
tt
library(GOstats)
params <- new("GOHyperGParams", geneIds=DEgenesEGs,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.05, testDirection="over")
geneUniverse <- rownames(lclse)
geneUniverse <- rownames(se)
params <- new("GOHyperGParams", geneIds=DEgenesEGs,
universeGeneIds=geneUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.05, testDirection="over")
hgOver <- hyperGTest(params)
hgOver
htmlReport(hgOver, file="gotests.html")
browseURL("gotests.html")
conditional(params) <- TRUE
hgOverCond <- hyperGTest(params)
hgOverCond
htmlReport(hgOverCond, file="goconditionaltests.html")
browseURL("goconditionaltests.html")
goresults <- summary(hgOverCond)
head(goresults)
goresults <- goresults[order(goresults$OddsRatio, decreasing=TRUE), ]
goresults
head(goresults)
goresults <- goresults[order(goresults$OddsRatio, decreasing=FALSE), ]
head(goresults)
goresults <- goresults[goresults$Size >= 10, ]
goresults <- goresults[order(goresults$OddsRatio, decreasing=TRUE), ]
head(goresults)
goresults <- goresults[goresults$Size > 14, ]
goresults <- goresults[order(goresults$OddsRatio, decreasing=TRUE), ]
head(goresults)
head(goresults)
history()
savehistory("~/ieo-project-2023-nem_seq/history.Rhistory")
geneIDs <- geneIdsByCategory(hgOverCond)[goresults$GOBPID]
geneSYMs <- sapply(geneIDs, function(id) select(org.Hs.eg.db, columns="SYMBOL", key=id, keytype="ENTREZID")$SYMBOL)
geneSYMs <- sapply(geneSYMs, paste, collapse=", ")
goresults <- cbind(goresults, Genes=geneSYMs)
rownames(goresults) <- 1:nrow(goresults)
library(kableExtra)
ktab <- kable(goresults, "html", caption="GO results.")
ktab <- kable_styling(ktab, bootstrap_options=c("stripped", "hover", "responsive"), fixed_thead=TRUE)
save_kable(ktab, file="goresults.html", self_contained=TRUE)
history()
savehistory("~/ieo-project-2023-nem_seq/history.Rhistory")
